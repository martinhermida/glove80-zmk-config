/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
            hold-trigger-on-release;
        };

        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <38 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71>;
            hold-trigger-on-release;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        keep_ctrl+tab_unchanged {
            bindings = <&kp LC(TAB)>;
            key-positions = <52 22>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2               &kp F3           &kp F4           &kp F5                                                                                                              &kp F6              &kp F7            &kp F8            &kp F9                &kp F10
&kp EQUAL   &kp N1               &kp N2           &kp N3           &kp N4             &kp N5                                                                                   &kp N6  &kp N7              &kp N8            &kp N9            &kp N0                &kp MINUS
&kp TAB     &kp Q                &kp W            &kp F            &kp P              &kp B                                                                                    &kp J   &kp L               &kp U             &kp Y             &kp SEMI              &kp BSLH
&kp ESC     &lt 2 A              &kp R            &lt 3 S          &hml LEFT_SHIFT T  &kp G                                                                                    &kp M   &hmr RIGHT_SHIFT N  &hmr RIGHT_GUI E  &hmr RIGHT_ALT I  &hmr RIGHT_CONTROL O  &kp SQT
&kp GRAVE   &hml LEFT_CONTROL Z  &hml LEFT_ALT X  &hml LEFT_GUI C  &kp D              &kp V   &kp LS(LA(LC(LGUI)))  &kp LEFT_SHIFT  &layer_td  &kp LGUI  &kp RCTRL  &kp RSHFT  &kp K   &kp H               &kp COMMA         &kp DOT           &kp FSLH              &kp PG_UP
&magic 1 0  &kp HOME             &kp END          &kp LEFT         &kp RIGHT                  &kp BSPC              &kp LEFT_GUI    &kp LALT   &kp RALT  &kp RET    &kp SPACE          &kp UP              &kp DOWN          &kp LBKT          &kp RBKT              &kp PG_DN
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        arrows {
            bindings = <
&trans  &trans  &trans        &trans        &trans                                                                                      &trans          &trans        &trans          &trans           &trans
&trans  &trans  &trans        &trans        &trans          &trans                                                  &trans              &trans          &trans        &trans          &trans           &trans
&trans  &trans  &trans        &trans        &trans          &trans                                                  &trans              &trans          &trans        &trans          &trans           &trans
&trans  &trans  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &trans                                                  &kp LG(LEFT_ARROW)  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp RG(RIGHT_ARROW)
&trans  &trans  &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans              &trans          &trans        &trans          &trans           &trans
&trans  &trans  &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans  &trans                      &trans          &trans        &trans          &trans           &trans
            >;
        };

        symbols {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                             &trans            &trans                &trans                 &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans             &trans            &trans                &trans                 &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans             &kp AMPERSAND     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE       &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp EXCLAMATION    &kp EQUAL         &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON      &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans                     &kp GRAVE         &kp MINUS             &kp UNDERSCORE         &trans         &trans
            >;
        };
    };
};
